buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
    classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3'
  }
}

plugins {
  id 'checkstyle'
  id 'eclipse'
  id 'java'
  id 'osgi'
  id 'com.bmuschko.nexus' version '2.3.1'
  id 'com.github.johnrengelman.shadow' version '1.2.3'
  id 'com.palantir.git-version' version '0.2.0'
  id 'org.inferred.processors' version '1.2.4-rc2'
}

repositories {
  mavenCentral()
}

sourceCompatibility = 1.8

dependencies {
  compile commonsLang3
  compile guava
  compile(source) {
    // Exclude transitive dependencies that don't affect the formatter
    exclude module: 'jcommander'
    exclude module: 'org.eclipse.equinox.app'
    exclude module: 'org.eclipse.core.filesystem'
    exclude module: 'org.eclipse.text'
    exclude module: 'org.eclipse.equinox.registry'
  }

  processor autoService
  processor 'org.inferred:freebuilder:1.10.3'

  testCompile guavaTestlib
  testCompile gwtUser
  testCompile hamcrest
  testCompile junit
  testCompile mockito
  testCompile sourceTesting
  testCompile 'org.assertj:assertj-core:3.4.1'
  testCompile 'org.assertj:assertj-guava:3.0.0'
}

if (System.env.CI == 'true') {
  // Continuous integration environments may assume the build has
  // hung if output stops.
  tasks.withType(Test) {
    testLogging {
      events 'passed', 'skipped', 'failed'
    }
  }
}

//// Checkstyle //////////////////////////////////////////////////
apply from: 'gradle/checkstyle.gradle'
checkstyle {
  toolVersion = '6.19'
}

//// Shadow JAR //////////////////////////////////////////////////
jar {
  classifier = 'only'
}

shadowJar {
  classifier = null

  afterEvaluate {
    ['com.google', 'org.apache', 'org.eclipse', 'org.osgi', 'org.inferred.internal'].each {
      relocate it, "${project.group}.${project.name}.shaded.$it"
    }
  }

  // Exclude common META-INF detritus
  exclude 'META-INF/*.txt'
  exclude 'META-INF/maven/**'

  // Exclude Eclipse (via google-java-format) detritus
  exclude 'META-INF/eclipse.inf'
  exclude 'META-INF/services/org.osgi.*'
  exclude '.api_description'
  exclude '.options'
  exclude 'about.html'
  exclude 'about_files/*.txt'
  exclude 'ant_tasks/*'
  exclude 'plugin.xml'
  exclude 'jdtCompilerAdapter.jar'
  exclude '*.profile'
  exclude '*.properties'
  exclude '*.list'
}

import java.util.zip.ZipFile
import java.util.zip.ZipException

task shadowTest {
  description "Verifies ${project.name}.jar is shaded correctly."
  group = 'Verification'
  check.dependsOn it
  shouldRunAfter test
  dependsOn shadowJar
  def expected = new File("$projectDir/jar-footprint.txt")
  def report = new File("$reportsDir/shadowJarFootprint.txt")
  inputs.file shadowJar.outputs
  inputs.file expected
  outputs.file report
  doFirst {
    def jar = shadowJar.outputs.files[0]
    def zip = new ZipFile(jar)
    def folders = new TreeSet<String>(zip.entries().collect {
      it.toString().replaceAll('([^/]*(/[^/]*){0,3}).*', '$1')
    })
    def expectedFolders = new TreeSet<String>(expected.readLines())
    report.parentFile.mkdirs()
    if (expectedFolders != folders) {
      def message = new StringBuilder('shadow.jar incorrect')
      def missing = expectedFolders - folders
      if (!missing.isEmpty()) {
        message.append('\nThe following are missing:')
        missing.forEach { message.append('\n  - ').append(it) }
      }
      def extra = folders - expectedFolders
      if (!extra.isEmpty()) {
        message.append('\nThe following should not be present:')
        extra.forEach { message.append('\n  - ').append(it) }
      }

      report.write message.toString()
      throw new GradleException(message.toString())
    }
    report.write 'shadow.jar correct'
  }
}

//// J8 integration tests ////////////////////////////////////////
apply from: 'gradle/integration-testing.gradle'
processorIntegrationTest('j8')

dependencies {
  j8Compile guava
  j8Compile gwtUser
  j8TestCompile junit
}
eclipseJ8Test.project.linkedResource name: 'src/main/java/org/inferred/freevisitor/FreeVisitor.java', type:'1', location: 'PARENT-1-PROJECT_LOC/src/main/java/org/inferred/freevisitor/FreeVisitor.java'

//// Publication /////////////////////////////////////////////////
apply plugin: 'io.codearte.nexus-staging'
apply from: 'gradle/publication.gradle'

group = 'org.inferred'

jar.manifest {
  name = 'FreeVisitor'
  description = 'Automatic generation of the Visitor pattern for Java 1.8+'
  license = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
}

artifacts {
  archives shadowJar
}

modifyPom {
  project {
    url "http://${project.name}.inferred.org/"

    developers {
      developer {
        id 'chrisalice'
        name 'Chris Purcell'
        email 'Chris.Purcell.39@gmail.com'
        timezone 'Europe/London'
      }
    }
  }
}

//// Eclipse /////////////////////////////////////////////////////
apply from: 'gradle/eclipse-test-project.gradle'
apply from: 'gradle/eclipse-plugin-nature.gradle'
